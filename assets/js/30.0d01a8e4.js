(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{425:function(e,t,a){"use strict";a.r(t);var s=a(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("WeekHeader",{attrs:{number:4,title:"Building RESTful APIs with Express"}}),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("Assignment Reminder")]),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/deliverables/assignment1.html"}},[e._v("Assignment 1 - Basic CRUD")]),e._v(" - is due "),t("strong",[e._v("before")]),e._v(" next week's class.")],1)]),e._v(" "),t("h2",{attrs:{id:"agenda"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#agenda"}},[e._v("#")]),e._v(" Agenda")]),e._v(" "),t("ul",[t("li",[e._v("AMA (15 min)")]),e._v(" "),t("li",[e._v("Building RESTful APIs with Express")]),e._v(" "),t("li",[e._v("Manual testing with Postman")]),e._v(" "),t("li",[e._v("GraphQL")]),e._v(" "),t("li",[e._v("Assignment 1: Basic CRUD (30 mins)")])]),e._v(" "),t("h2",{attrs:{id:"manual-testing-with-postman"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manual-testing-with-postman"}},[e._v("#")]),e._v(" Manual testing with Postman")]),e._v(" "),t("p",[e._v("Manual testing with Postman is a powerful way to test your API's functionality and behavior. Here are a few more tips for testing your API using Postman:")]),e._v(" "),t("ul",[t("li",[e._v("Use the "),t("code",[e._v("Save")]),e._v(" button to save your requests in a collection, so you can run them again later or share them with others.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Duplicate")]),e._v(" button to make a copy of a request, so you can easily create similar requests with slight modifications.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("History")]),e._v(" tab to view a history of all the requests you've made, and quickly re-run any of them.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Tests")]),e._v(" tab to write test scripts in JavaScript, you can use these scripts to perform assertions on the response, set environment variables, or even generate data for the next request.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Pre-request")]),e._v(' Script" tab to write scripts that run before the request is sent, you can use these scripts to generate data, set variables, or even modify the request.')]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Variables")]),e._v(" tab to manage environment variables, you can use these variables to store and reuse values such as API keys and URLs.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Auth")]),e._v(" tab to set up authentication for your request, you can use this feature to test your API's authentication and authorization functionality.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Headers")]),e._v(" tab to add or modify headers for your request, you can use this feature to test your API's functionality that depends on headers, such as content-type or user-agent")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Body")]),e._v(" tab to add or modify the body of your request, you can use this feature to test your API's functionality that depends on the body of the request, such as a JSON payload")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Send and download")]),e._v(" button to download the response as a file, you can use this feature to test your API's functionality that returns files.")])]),e._v(" "),t("p",[e._v("By following these tips, you can take full advantage of Postman's features and capabilities to test your API effectively and efficiently.")]),e._v(" "),t("p",[e._v("Looking to learn about Advanced option about Postman, follow along:")]),e._v(" "),t("ul",[t("li",[e._v("Use the "),t("code",[e._v("Environment")]),e._v(" feature to easily switch between different environments, such as development, staging, and production. This allows you to test your API in different configurations, and to ensure that it behaves correctly in each environment.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Runner")]),e._v(" feature to run a collection of requests in a specific order and with specific data. This allows you to test your API's functionality that depends on multiple requests, such as a login flow or a checkout process.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Monitor")]),e._v(" feature to schedule and run your requests on a regular basis, this allows you to test your API's functionality that is dependent on time, such as a scheduled job or a recurring event")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("Mocks")]),e._v(" feature to simulate a response from an endpoint that is not yet implemented, this allows you to test your API's functionality that depends on other APIs, such as a third-party service or a microservice.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("API documentation")]),e._v(" feature to generate documentation for your API, this allows you to share your API with other developers and stakeholders and communicate how your API works.")]),e._v(" "),t("li",[e._v("Use the "),t("code",[e._v("API testing")]),e._v(" feature to test the performance and security of your API, this allows you to test your API's performance, security and other aspects such as compliance\nUse the "),t("code",[e._v("Integration")]),e._v(" feature to integrate with other tools, such as Github, Jira, and Slack, this allows you to integrate your API testing process with your development workflow and receive notifications and reports in your preferred platform")])]),e._v(" "),t("p",[e._v("By following these tips, you can take full advantage of Postman's features and capabilities to test your API effectively and efficiently. And also you can use the Postman's cloud-based version, to share the collections and environments with your team members, and collaborate on testing and documenting your APIs.")]),e._v(" "),t("h2",{attrs:{id:"graphql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[e._v("#")]),e._v(" GraphQL")]),e._v(" "),t("h4",{attrs:{id:"what-is-graphql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-is-graphql"}},[e._v("#")]),e._v(" What is GraphQL")]),e._v(" "),t("p",[e._v("GraphQL is a query language for APIs and a runtime for executing those queries against your data. It was developed and open-sourced by Facebook in 2015. GraphQL allows client applications to request only the specific data they need, and it allows for more efficient and flexible communication between the client and the server. It is often used as an alternative to RESTful API architecture.")]),e._v(" "),t("h4",{attrs:{id:"examples-of-graphql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples-of-graphql"}},[e._v("#")]),e._v(" Examples of GraphQL")]),e._v(" "),t("p",[e._v("Here are a few examples of how GraphQL can be used:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Retrieving information about a specific user: A client application can send a query that requests the name, email, and address of a user with a specific ID. The server can then respond with only the requested information.")])]),e._v(" "),t("li",[t("p",[e._v("Updating multiple fields on an object: A client application can send a single mutation (a special kind of query) that updates the name, email, and address of a user with a specific ID all in one request, rather than having to send multiple requests to update each field individually.")])]),e._v(" "),t("li",[t("p",[e._v('Filtering a list of items: A client application can request a list of items, but also specify certain filters to apply to the list. For example, it can request a list of all "red" items that are priced under $50.')])]),e._v(" "),t("li",[t("p",[e._v('Nested queries: A client can request a complex object and its related object, like asking a question "give me all the books of a specific author and also give me all the comments made by the readers on the book"')])])]),e._v(" "),t("p",[e._v("These are just a few examples, but GraphQL's flexibility allows for many other use cases as well.")]),e._v(" "),t("h4",{attrs:{id:"code-examples-of-graphql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#code-examples-of-graphql"}},[e._v("#")]),e._v(" Code examples of GraphQL")]),e._v(" "),t("p",[e._v("Here's an example of a GraphQL query that retrieves information about a specific user:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("\nquery "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("user")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"123"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    name\n    email\n    address\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),t("p",[e._v("And here's an example of a GraphQL mutation that updates multiple fields on a user object:")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("\nmutation "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("updateUser")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"123"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"John Smith"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("email")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"john@example.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("address")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"123 Main St"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    name\n    email\n    address\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("And here's an example of a GraphQL query that gets all the books of a specific author and also gives all the comments made by the readers on the book")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[e._v("query "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("author")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("id")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    name\n    books "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      title\n      comments "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        text\n        user "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n          name\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("These examples are written in the GraphQL query language and they can be sent to a GraphQL server, which would then execute the query and return the requested data.")]),e._v(" "),t("p",[e._v("It's worth noting that the GraphQL query language is agnostic to the programming language or framework you're using, so the examples above can be used in any language or framework that has a GraphQL library or implementation.")]),e._v(" "),t("h2",{attrs:{id:"assignment-1-basic-crud-30-mins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assignment-1-basic-crud-30-mins"}},[e._v("#")]),e._v(" Assignment 1: Basic CRUD (30 mins)")]),e._v(" "),t("p",[t("RouterLink",{attrs:{to:"/deliverables/assignment1.html"}},[e._v("Assignment 1 - Basic CRUD")])],1)],1)}),[],!1,null,null,null);t.default=n.exports}}]);